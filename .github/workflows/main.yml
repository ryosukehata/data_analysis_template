name: Linting and Tests
on: push

jobs:
  Tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS]
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: poetry install
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          echo "::set-env name=PATH::$HOME/.poetry/bin:$PATH"

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true


      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Upgrade pip
        shell: bash
        run: poetry run python -m pip install pip -U

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Linting by Flake8
        shell: bash
        run: |
          poetry run flake8 --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 --exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        shell: bash
        run: poetry run pytest --verbose --color=yes
